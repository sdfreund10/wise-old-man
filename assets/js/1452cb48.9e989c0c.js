"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[265],{6510:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(6010),l=a(7294);const r={verb:"verb_Nwub",path:"path_stP6",post:"post_PxBq",delete:"delete_r1td",get:"get_DBE8",put:"put_QdXb",patch:"patch_xPbH"},i=e=>{const{verb:t,path:a}=e;return l.createElement("div",null,l.createElement("span",{className:(0,n.Z)(r.verb,r[t.toLowerCase()])},t),l.createElement("span",{className:r.path},a))}},930:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(7294),l=a(814),r=a(7462),i=a(6010),p=a(2389),d=a(7392),s=a(7094),o=a(2466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:a,block:l,defaultValue:p,values:m,groupId:b,className:k}=e,g=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=m??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),h=(0,d.l)(y,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===p?p:p??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,s.U)(),[T,E]=(0,n.useState)(N),Z=[],{blockElementScrollPositionUntilNextRender:D}=(0,o.o5)();if(null!=b){const e=f[b];null!=e&&e!==T&&y.some((t=>t.value===e))&&E(e)}const w=e=>{const t=e.currentTarget,a=Z.indexOf(t),n=y[a].value;n!==T&&(D(t),E(n),null!=b&&v(b,String(n)))},C=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=Z.indexOf(e.currentTarget)+1;a=Z[t]??Z[0];break}case"ArrowLeft":{const t=Z.indexOf(e.currentTarget)-1;a=Z[t]??Z[Z.length-1];break}}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,i.Z)("tabs-container",u)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},k)},y.map((e=>{let{value:t,label:a,attributes:l}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>Z.push(e),onKeyDown:C,onFocus:w,onClick:w},l,{className:(0,i.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,n.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function b(e){const t=(0,p.Z)();return n.createElement(m,(0,r.Z)({key:String(t)},e))}const k="tabItem_Ymn6";function g(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.Z)(k,l),hidden:a},t)}const y={curl:"cURL",javascript:"JavaScript / TypeScript"},h=e=>{const{children:t}=e,a=t.map((e=>{const t=e.props.children.props;return{language:t.className.replace("language-",""),code:t.children}}));return n.createElement(b,{groupId:"tabbed-code-block"},a.map((e=>n.createElement(g,{value:e.language,label:y[e.language]},n.createElement(l.Z,{language:e.language},e.code)))))}},573:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>m,frontMatter:()=>p,metadata:()=>s,toc:()=>u});var n=a(7462),l=(a(7294),a(3905)),r=a(6510),i=a(930);const p={title:"Delta Endpoints",sidebar_position:2},d=void 0,s={unversionedId:"api/deltas/delta-endpoints",id:"api/deltas/delta-endpoints",title:"Delta Endpoints",description:"Related Endpoints",source:"@site/docs/api/deltas/delta-endpoints.mdx",sourceDirName:"api/deltas",slug:"/api/deltas/delta-endpoints",permalink:"/api/deltas/delta-endpoints",draft:!1,editUrl:"https://github.com/wise-old-man/wise-old-man/tree/master/docs/docs/api/deltas/delta-endpoints.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Delta Endpoints",sidebar_position:2},sidebar:"api",previous:{title:"Delta Types & Entities",permalink:"/api/deltas/delta-type-definitions"},next:{title:"Name Changes API",permalink:"/api/name-changes"}},o={},u=[{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Get Global Delta Leaderboards",id:"get-global-delta-leaderboards",level:2}],c={toc:u};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"related-endpoints"},"Related Endpoints"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/api/players/player-endpoints#get-player-gains"},"Players - Get Player Gains")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/api/groups/group-endpoints#get-group-gains"},"Groups - Get Group Gains"))),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"get-global-delta-leaderboards"},"Get Global Delta Leaderboards"),(0,l.kt)(r.Z,{verb:"GET",path:"/deltas/leaderboard",mdxType:"Endpoint"}),(0,l.kt)("br",null),(0,l.kt)("p",null,"Fetches the current top deltas leaderboard for a specific metric and period. Returns an array of ",(0,l.kt)("a",{parentName:"p",href:"/api/deltas/delta-type-definitions#object-delta-leaderboard-entry"},"DeltaLeaderboardEntry")," objects."),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Query Params")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"period"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/global-type-definitions#enum-period"},"Period")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:null},"The delta's time period.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"metric"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/global-type-definitions#enum-metric"},"Metric")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:null},"The delta's metric.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"playerType"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/players/player-type-definitions#enum-player-type"},"PlayerType"),"?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},"The player's account type to filter by.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"playerBuild"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/players/player-type-definitions#enum-player-build"},"PlayerBuild"),"?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},"The player's account build to filter by.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"country"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/players/player-type-definitions#enum-country"},"Country"),"?"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},"The player's country of origin to filter by.")))),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example Request")),(0,l.kt)(i.Z,{mdxType:"TabbedCodeBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-curl"},'curl -X GET https://api.wiseoldman.net/v2/deltas/leaderboard?metric=agility&period=week&playerType=hardcore \\\n  -H "Content-Type: application/json"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const { WOMClient, Metric, Period, PlayerType } = require('@wise-old-man/utils');\n\nconst client = new WOMClient();\n\nconst deltasLeaderboard = await client.deltas.getDeltaLeaderboard({\n  period: Period.WEEK,\n  metric: Metric.AGILITY,\n  playerType: PlayerType.HARDCORE\n});\n"))),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "player": {\n      "id": 642741,\n      "username": "hcim tempor",\n      "displayName": "hcim tempor",\n      "type": "hardcore",\n      "build": "lvl3",\n      "country": null,\n      "status": "active",\n      "patron": false,\n      "exp": 44230345,\n      "ehp": 272.8137900000002,\n      "ehb": 0,\n      "ttm": 1489.52058,\n      "tt200m": 22179.99752,\n      "registeredAt": "2022-06-02T18:25:56.505Z",\n      "updatedAt": "2022-10-31T10:29:01.606Z",\n      "lastChangedAt": "2022-10-31T10:29:01.320Z",\n      "lastImportedAt": "2022-10-31T10:29:01.605Z"\n    },\n    "playerId": 642741,\n    "startDate": "2022-10-24T21:18:03.001Z",\n    "endDate": "2022-10-31T10:29:01.320Z",\n    "gained": 5043464\n  },\n  {\n    "player": {\n      "id": 548486,\n      "username": "disco nex",\n      "displayName": "Disco Nex",\n      "type": "hardcore",\n      "build": "main",\n      "country": null,\n      "status": "active",\n      "patron": false,\n      "exp": 234923515,\n      "ehp": 1127.887409999999,\n      "ehb": 146.66224,\n      "ttm": 646.6717099999987,\n      "tt200m": 21324.9239,\n      "registeredAt": "2022-02-12T13:34:12.453Z",\n      "updatedAt": "2022-10-31T11:54:38.124Z",\n      "lastChangedAt": "2022-10-31T11:54:37.977Z",\n      "lastImportedAt": "2022-10-31T00:48:27.431Z"\n    },\n    "playerId": 548486,\n    "startDate": "2022-10-24T14:37:14.528Z",\n    "endDate": "2022-10-31T11:54:37.976Z",\n    "gained": 3750334\n  }\n]\n')))}m.isMDXComponent=!0}}]);